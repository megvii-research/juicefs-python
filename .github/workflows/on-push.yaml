name: build
on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  build-binaries:
    name: build juicefs (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: linux
            os: ubuntu-18.04
          - target: windows
            os: ubuntu-18.04
          - target: macos
            os: macos-latest

    steps:
      - name: Checkout Github Repository
        uses: actions/checkout@v2

      - name: Get JuiceFS Version
        id: jfs-version
        run: echo "::set-output name=JUICEFS_VERSION::$(make -s print_libjfs_version)"

      - name: Cache binary files
        uses: actions/cache@v2
        id: jfs-cache
        with:
          path: |
            ./juicefs/lib/
            !./juicefs/lib/*.py
          key: cache-jfs-${{ matrix.target }}-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}

      - name: Set up Golang
        uses: actions/setup-go@v2
        if: ${{ steps.jfs-cache.outputs.cache-hit != 'true' }}

      - name: Build for linux or macos
        if: ${{ steps.jfs-cache.outputs.cache-hit != 'true' && matrix.target != 'Windows' }}
        run: |
          make build_libjfs_so

      - name: Install MinGW GCC
        if: ${{ steps.jfs-cache.outputs.cache-hit != 'true' && matrix.target == 'Windows' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-mingw-w64-x86-64

      - name: Build for windows
        if: ${{ steps.jfs-cache.outputs.cache-hit != 'true' && matrix.target == 'Windows' }}
        run: |
          make build_libjfs_dll

      # Artifact and cache are separated, and artifact lacks the ability to check
      # if it exists, so we upload the artifact repeatedly every time.
      - name: Upload binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: jfs-binary-${{ matrix.target }}-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: |
            ./juicefs/lib/libjfs*
            ./juicefs/lib/juicefs*
          retention-days: 1

  test:
    needs: build-binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-18.04, windows-latest]
        python-version: ["3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]

        include:
          - os: ubuntu-18.04
            target: linux
            pip-path: /opt/hostedtoolcache/Python
          - os: macos-latest
            target: macos
            pip-path: /Users/runner/hostedtoolcache/Python
          - os: windows-latest
            target: windows
            pip-path: C:\hostedtoolcache\windows\Python

    steps:
      - name: Checkout Github Repository
        uses: actions/checkout@v2

      - name: Get JuiceFS Version
        id: jfs-version
        run: echo "::set-output name=JUICEFS_VERSION::$(make -s print_libjfs_version)"

      - name: Download jfs binary artifact
        uses: actions/download-artifact@v2
        with:
          name: jfs-binary-${{ matrix.target }}-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: ./juicefs/lib/

      - name: Make juicefs executable
        run: |
          chmod 755 ./juicefs/lib/juicefs*
          ls -l ./juicefs/lib/

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Cache Pip
      #   id: pip-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ matrix.pip-path }}
      #     key: ${{ matrix.os }}-python${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}

      - name: Install Package Dependencies
        # if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: Run unit-test
        run: |
          make test

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true

  check:
    name: static check (${{ matrix.os }}, ${{ matrix.python-version }})
    needs: build-binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: ["3.6"]
        include:
          - os: ubuntu-18.04
            target: linux
            pip-path: /opt/hostedtoolcache/Python

    steps:
      - name: Checkout Github Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Cache Pip
      #   id: pip-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ matrix.pip-path }}
      #     key: ${{ matrix.os }}-python${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}

      - name: Install Package Dependencies
        #if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: Get JuiceFS Version
        id: jfs-version
        run: echo "::set-output name=JUICEFS_VERSION::$(make -s print_libjfs_version)"

      - name: Download jfs binary artifact
        uses: actions/download-artifact@v2
        with:
          name: jfs-binary-${{ matrix.target }}-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: ./juicefs/lib/

      - name: Make juicefs executable
        run: |
          chmod 755 ./juicefs/lib/juicefs*
          ls -l ./juicefs/lib/

      - name: Run style-check
        run: |
          make style_check

      - name: Run static-check
        run: |
          make static_check
